####
#	Author: Xavid Ramirez
#	Email:	xavidram@hotmail.com
#	Alt Email: xavid.ramirez01@utrgv.edu
#	Script Summary:	This script will sample values
#					from a vibration sensors at a 
#					desired sampling fequency.
#	License:		MIT  =>   https://tldrlegal.com/license/mit-license
####

import u3
import threading
import os
import platform
import signal
import time

#initialize the Labjack U3 object
d = u3.U3()

#Global Variables
Frequency = 0
TimeCount = 0
Runtime = 0

# Function definitions:
def cleanUp():
	"""
		Function:	cleanUp
		Params:		NONE
		Libraries:	os
		Desc:		Detect which system is running the
					script and run the os's clear command
					to clear the screan.
	"""
	if 'Windows' in platform.system():
		os.system('cls')
	elif 'Linux' in platform.system():
		os.system('clear')
	elif 'OSX' in platform.system():
		os.system('clear')

def AnalyzeThreaded():
	"""
		Threading version of the calibrate function, works on normal
		desktops not on microcontrollers
	"""
	threading.Timer(Frequency, pAIN0).start()
	print "%.6f" % (d.readRegister(0))
	with open(FileName , 'a') as textfile:
		textfile.write(str(d.readRegister(0)) + '\n' )

def Analyze():
	"""
		Function:   Calibrate
		params:     None
		Libraries:	csv, u3
		Desc:		Open the given file, and keep appending
					to it every read register value from the 
					labjack analog register AIN0 (0). After
					a value is read, the function sleeps for
					the given sampling frequency so that only
					samples at the desired sampling frequency
					are logged.
	"""
	Timestart = time.time()	#obtain current time
	Timestamps = []	#initialize timestamps array
	Values = []	#initialize value array
	Duration = int(Runtime)	#convert runtime to int
	while (time.time() - Timestart) < Duration:	#run while current timedifference less than program duration
		Timestamps.append((time.time() - Timestart))	#grab current time
		Values.append(d.readRegister(0))	#grab value (.0001 delay)
		time.sleep(Frequency)	#sleep for desired sampling frequency time
	
	#write out all the contents after the data is captured to reduce delay time
	with open(FileName, 'a') as textfile:
		j = 0
		while j < len(Timestamps):
			textfile.write(str(Timestamps[j]) + '\t\t' + str(Values[j]) + '\n')
			j += 1

def updateFileName():
	if fileindex < 10:
		FileName = 'Trial_0%d_%ds_%.4fhz.txt' % (fileindex,Runtime,Frequency)
	elif fileindex >= 10:
		FileName = 'Trial_%d_%ds_%.4fhz.txt' % (fileindex,Runtime,Frequency)

#Program Start:
cleanUp()
print " ---Vibration Sensor Calibration---\n "
FileName = raw_input("What would you like to call the save file generated by this trial? ex: file.txt :  ")
H = raw_input("What frequency would you like to capture values at? (hz):  ")
Runtime = raw_input("how long would you like the trials to last?(seconds) : ")
Frequency = 1 / float(H)	#get the sampling frequency by dividing the value one by the given Frequency (H)
print "Sampling rate set to: %s" % (Frequency)
print "REMEMBER: In order to stop script, use key combinations ctrl + c or script will run until stopped!"
print "Please double check that your sensor is connected on the proper channels: |  Analog VS, Analog Ground, AIN0  | \n"
print "Starting.....\n"
time.sleep(2)
cleanUp()
fileindex = 1

while True:
	Analyze()
	fileindex += 1